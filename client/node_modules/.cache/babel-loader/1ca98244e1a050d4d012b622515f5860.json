{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\ecommerce\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport { fetchCollectionStartAsync } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selector';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    const {\n      fetchCollectionStartAsync\n    } = this.props;\n    fetchCollectionStartAsync(); // const { updateCollections } = this.props\n    // const collectionRef = firestore.collection('collections');\n    // ## doable but need navigating function to navigate the nested obj\n    // fetch('https://firestore.googleapis.com/v1/projects/ecommerce-db-bac64/databases/(default)/documents/collections')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections))\n    // ### promise && then pattern (only get data when re-mount this component)\n    // collectionRef.get().then(\n    //     snapshot => {\n    //         const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n    //         updateCollections(collectionsMap);\n    //         this.setState({ loading: false });\n    //     }\n    // )\n    // ### observer && observable pattern (get data whenever snapshot changes)\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //     const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching,\n      isCollectionsLoaded\n    } = this.props;\n    console.log(isCollectionFetching);\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: !isCollectionsLoaded\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !isCollectionsLoaded\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStatetoProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchtoProps = dispatch => ({\n  fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync())\n});\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(ShopPage);","map":{"version":3,"sources":["C:/code/ecommerce/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","createStructuredSelector","CollectionsOverview","CollectionPage","fetchCollectionStartAsync","selectIsCollectionFetching","selectIsCollectionsLoaded","WithSpinner","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","isCollectionsLoaded","console","log","path","mapStatetoProps","mapDispatchtoProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,SAASC,0BAAT,EAAqCC,yBAArC,QAAsE,gCAAtE;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAGA,MAAMC,8BAA8B,GAAGD,WAAW,CAACL,mBAAD,CAAlD;AACA,MAAMO,yBAAyB,GAAGF,WAAW,CAACJ,cAAD,CAA7C;;AAEA,MAAMO,QAAN,SAAuBZ,KAAK,CAACa,SAA7B,CAAuC;AAEnCC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAER,MAAAA;AAAF,QAAgC,KAAKS,KAA3C;AACAT,IAAAA,yBAAyB,GAFT,CAGhB;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDU,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,oBAAT;AAA+BC,MAAAA;AAA/B,QAAuD,KAAKJ,KAAlE;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAZ;AACA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAED,KAAK,CAACK,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGP,KAAD,IAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAE,CAACI;AAA5C,SAAqEJ,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACK,IAAK,gBAA3B;AAA4C,MAAA,MAAM,EAAGP,KAAD,IAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAE,CAACI;AAAvC,SAAgEJ,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AAxCkC;;AA2CvC,MAAMQ,eAAe,GAAGpB,wBAAwB,CAAC;AAC7Ce,EAAAA,oBAAoB,EAAEX,0BADuB;AAE7CY,EAAAA,mBAAmB,EAAEX;AAFwB,CAAD,CAAhD;;AAIA,MAAMgB,kBAAkB,GAAGC,QAAQ,KAAK;AACpCnB,EAAAA,yBAAyB,EAAE,MAAMmB,QAAQ,CAACnB,yBAAyB,EAA1B;AADL,CAAL,CAAnC;;AAOA,eAAeJ,OAAO,CAACqB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CZ,QAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionPage from '../collection/collection.component';\r\nimport { fetchCollectionStartAsync } from '../../redux/shop/shop.actions';\r\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selector';\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const { fetchCollectionStartAsync } = this.props;\r\n        fetchCollectionStartAsync()\r\n        // const { updateCollections } = this.props\r\n        // const collectionRef = firestore.collection('collections');\r\n        \r\n        // ## doable but need navigating function to navigate the nested obj\r\n        // fetch('https://firestore.googleapis.com/v1/projects/ecommerce-db-bac64/databases/(default)/documents/collections')\r\n        // .then(response => response.json())\r\n        // .then(collections => console.log(collections))\r\n\r\n\r\n        // ### promise && then pattern (only get data when re-mount this component)\r\n        // collectionRef.get().then(\r\n        //     snapshot => {\r\n        //         const collectionsMap = convertCollectionSnapshotToMap(snapshot);\r\n        //         updateCollections(collectionsMap);\r\n        //         this.setState({ loading: false });\r\n        //     }\r\n        // )\r\n        \r\n        // ### observer && observable pattern (get data whenever snapshot changes)\r\n        // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\r\n        //     const collectionsMap = convertCollectionSnapshotToMap(snapshot);\r\n        //     updateCollections(collectionsMap);\r\n        //     this.setState({ loading: false });\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        const { match, isCollectionFetching, isCollectionsLoaded } = this.props\r\n        console.log(isCollectionFetching);\r\n        return (\r\n            <div className='shop-page'>\r\n                <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\r\n                <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStatetoProps = createStructuredSelector({\r\n    isCollectionFetching: selectIsCollectionFetching,\r\n    isCollectionsLoaded: selectIsCollectionsLoaded\r\n})\r\nconst mapDispatchtoProps = dispatch => ({\r\n    fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync())\r\n})\r\n   \r\n\r\n\r\n\r\nexport default connect(mapStatetoProps, mapDispatchtoProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}