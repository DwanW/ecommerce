{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\ecommerce\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections');\n    fetch('https://firestore.googleapis.com/v1/projects/ecommerce-db-bac64/databases/(default)/documents/collections').then(response => response.json()).then(collections => console.log(collections)); // ### promise && then pattern (only get data when re-mount this component)\n    // collectionRef.get().then(\n    //     snapshot => {\n    //         const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n    //         updateCollections(collectionsMap);\n    //         this.setState({ loading: false });\n    //     }\n    // )\n    // ### observer && observable pattern (get data whenever snapshot changes)\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //     const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    const {\n      match\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispatchtoProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchtoProps)(ShopPage);","map":{"version":3,"sources":["C:/code/ecommerce/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","CollectionsOverview","CollectionPage","updateCollections","WithSpinner","firestore","convertCollectionSnapshotToMap","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","fetch","then","response","json","collections","console","log","render","match","path","mapDispatchtoProps","dispatch","collectionsMap"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,+BAA1D;AAEA,MAAMC,8BAA8B,GAAGH,WAAW,CAACH,mBAAD,CAAlD;AACA,MAAMO,yBAAyB,GAAGJ,WAAW,CAACF,cAAD,CAA7C;;AAEA,MAAMO,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACnCC,KADmC,GAC3B;AACJC,MAAAA,OAAO,EAAE;AADL,KAD2B;AAAA,SAKnCC,uBALmC,GAKT,IALS;AAAA;;AAOnCC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEX,MAAAA;AAAF,QAAwB,KAAKY,KAAnC;AACA,UAAMC,aAAa,GAAGX,SAAS,CAACY,UAAV,CAAqB,aAArB,CAAtB;AAEAC,IAAAA,KAAK,CAAC,2GAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,WAAW,IAAIC,OAAO,CAACC,GAAR,CAAYF,WAAZ,CAFrB,EAJgB,CAQhB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEb,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,UAAM;AAAEe,MAAAA;AAAF,QAAY,KAAKX,KAAvB;AACA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEW,KAAK,CAACC,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGZ,KAAD,IAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEH;AAA3C,SAAwDG,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEW,KAAK,CAACC,IAAK,gBAA3B;AAA4C,MAAA,MAAM,EAAGZ,KAAD,IAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEH;AAAtC,SAAmDG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AA1CkC;;AA6CvC,MAAMa,kBAAkB,GAAGC,QAAQ,KAAK;AACpC1B,EAAAA,iBAAiB,EAAE2B,cAAc,IAAID,QAAQ,CAAC1B,iBAAiB,CAAC2B,cAAD,CAAlB;AADT,CAAL,CAAnC;;AAMA,eAAe9B,OAAO,CAAC,IAAD,EAAO4B,kBAAP,CAAP,CAAkCnB,QAAlC,CAAf","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionPage from '../collection/collection.component';\r\nimport { updateCollections } from '../../redux/shop/shop.actions';\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends React.Component {\r\n    state = {\r\n        loading: true\r\n    };\r\n\r\n    unsubscribeFromSnapshot = null;\r\n\r\n    componentDidMount() {\r\n        const { updateCollections } = this.props\r\n        const collectionRef = firestore.collection('collections');\r\n        \r\n        fetch('https://firestore.googleapis.com/v1/projects/ecommerce-db-bac64/databases/(default)/documents/collections')\r\n        .then(response => response.json())\r\n        .then(collections => console.log(collections))\r\n\r\n        // ### promise && then pattern (only get data when re-mount this component)\r\n        // collectionRef.get().then(\r\n        //     snapshot => {\r\n        //         const collectionsMap = convertCollectionSnapshotToMap(snapshot);\r\n        //         updateCollections(collectionsMap);\r\n        //         this.setState({ loading: false });\r\n        //     }\r\n\r\n        // )\r\n        \r\n        // ### observer && observable pattern (get data whenever snapshot changes)\r\n        // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\r\n        //     const collectionsMap = convertCollectionSnapshotToMap(snapshot);\r\n        //     updateCollections(collectionsMap);\r\n        //     this.setState({ loading: false });\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        const { loading } = this.state;\r\n        const { match } = this.props\r\n        return (\r\n            <div className='shop-page'>\r\n                <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={loading} {...props} />} />\r\n                <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={loading} {...props} />} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchtoProps = dispatch => ({\r\n    updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\r\n})\r\n\r\n\r\n\r\nexport default connect(null, mapDispatchtoProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}