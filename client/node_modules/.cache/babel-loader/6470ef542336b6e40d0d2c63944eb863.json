{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\ecommerce\\\\client\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React, { useEffect } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions';\n\nconst ShopPage = ({\n  fetchCollectionsStart,\n  match\n}) => {\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]);\n  return React.createElement(\"div\", {\n    className: \"shop-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    component: CollectionsOverviewContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    component: CollectionPageContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }));\n};\n\nconst mapDispatchtoProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(null, mapDispatchtoProps)(ShopPage); // const { updateCollections } = this.props\n// const collectionRef = firestore.collection('collections');\n// ## doable but need navigating function to navigate the nested obj\n// fetch('https://firestore.googleapis.com/v1/projects/ecommerce-db-bac64/databases/(default)/documents/collections')\n// .then(response => response.json())\n// .then(collections => console.log(collections))\n// ### promise && then pattern (only get data when re-mount this component)\n// collectionRef.get().then(\n//     snapshot => {\n//         const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n//         updateCollections(collectionsMap);\n//         this.setState({ loading: false });\n//     }\n// )\n// ### observer && observable pattern (get data whenever snapshot changes)\n// this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n//     const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n//     updateCollections(collectionsMap);\n//     this.setState({ loading: false });\n// });","map":{"version":3,"sources":["C:/code/ecommerce/client/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","Route","connect","CollectionsOverviewContainer","CollectionPageContainer","fetchCollectionsStart","ShopPage","match","path","mapDispatchtoProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,SAASC,qBAAT,QAAsC,+BAAtC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAED,EAAAA,qBAAF;AAAyBE,EAAAA;AAAzB,CAAD,KAAsC;AAEnDP,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,qBAAqB;AACxB,GAFQ,EAEN,CAACA,qBAAD,CAFM,CAAT;AAIA,SACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAG,GAAEE,KAAK,CAACC,IAAK,EAAjC;AAAoC,IAAA,SAAS,EAAEL,4BAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,GAAEI,KAAK,CAACC,IAAK,gBAA3B;AAA4C,IAAA,SAAS,EAAEJ,uBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAOH,CAbD;;AAeA,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACpCL,EAAAA,qBAAqB,EAAE,MAAMK,QAAQ,CAACL,qBAAqB,EAAtB;AADD,CAAL,CAAnC;;AAIA,eAAeH,OAAO,CAAC,IAAD,EAAOO,kBAAP,CAAP,CAAkCH,QAAlC,CAAf,C,CAGA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\r\nimport CollectionPageContainer from '../collection/collection.container';\r\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions';\r\n\r\nconst ShopPage = ({ fetchCollectionsStart, match }) => {\r\n\r\n    useEffect(() => {\r\n        fetchCollectionsStart();\r\n    }, [fetchCollectionsStart])\r\n\r\n    return (\r\n        <div className='shop-page'>\r\n            <Route exact path={`${match.path}`} component={CollectionsOverviewContainer} />\r\n            <Route path={`${match.path}/:collectionId`} component={CollectionPageContainer} />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst mapDispatchtoProps = dispatch => ({\r\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\r\n})\r\n\r\nexport default connect(null, mapDispatchtoProps)(ShopPage);\r\n\r\n\r\n// const { updateCollections } = this.props\r\n// const collectionRef = firestore.collection('collections');\r\n\r\n// ## doable but need navigating function to navigate the nested obj\r\n// fetch('https://firestore.googleapis.com/v1/projects/ecommerce-db-bac64/databases/(default)/documents/collections')\r\n// .then(response => response.json())\r\n// .then(collections => console.log(collections))\r\n\r\n\r\n// ### promise && then pattern (only get data when re-mount this component)\r\n// collectionRef.get().then(\r\n//     snapshot => {\r\n//         const collectionsMap = convertCollectionSnapshotToMap(snapshot);\r\n//         updateCollections(collectionsMap);\r\n//         this.setState({ loading: false });\r\n//     }\r\n// )\r\n\r\n// ### observer && observable pattern (get data whenever snapshot changes)\r\n// this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\r\n//     const collectionsMap = convertCollectionSnapshotToMap(snapshot);\r\n//     updateCollections(collectionsMap);\r\n//     this.setState({ loading: false });\r\n// });"]},"metadata":{},"sourceType":"module"}